{
 " клетки " : [
  {
   " cell_type " : " уценка " ,
   " метаданные " : {
    " colab_type " : " текст " ,
    " id " : " XDvIjXU01_ua " ,
    " источник " : [
    " <a href= \" https://colab.research.google.com/drive/1OFbSj-d0S9g4NDJfd7tGCFbaWsBklrFr \"> <img align = \" left \ " src = \" https://colab.research.google. com / assets / colab-badge.svg \ " alt = \" Открыть в Colab \ " title = \" Открыть и выполнить в Google Colaboratory \ " target = \" _blank \ " > </a> "
   ]
   },
   " источник " : [
    " # Домашнее задание №1 "
   ]
  },
  {
   " cell_type " : " уценка " ,
   " метаданные " : {
    " colab_type " : " текст " ,
    " id " : " 1nwh5nM22F6Z "
   },
   " источник " : [
    " ## Задание №1 "
   ]
  },
  {
   " cell_type " : " уценка " ,
   " метаданные " : {
    " colab_type " : " текст " ,
    " id " : " Qy0cZ-F4KFQJ "
   },
   " источник " : [
    " * Способ №1 * "
   ]
  },
  {
   " cell_type " : " код " ,
   " execution_count " : 1 ,
   " метаданные " : {
    " colab " : {
     " base_uri " : " https: // localhost: 8080 / " ,
     « высота » : 68
    },
    " colab_type " : " код " ,
    " executionInfo " : {
     « истекло » : 2179 ,
     " status " : " ok " ,
     " отметка времени " : 1599591803424 ,
     " user " : {
      " displayName " : " Егор Бронников " ,
      " photoUrl " : " https://lh3.googleusercontent.com/a-/AOh14GhweVQJI7BiE5TaPetwNnKNCwUO1mynGtoA5-pe4Q=s64 " ,
      " userId " : " 14770815761046424264 "
     },
     " user_tz " : -180
    },
    " id " : " fE_C1cFu1tFA " ,
    " outputId " : " 4974cc15-c7d4-4901-c2d3-7a9b07fcf8ed "
   },
   " выходы " : [
    {
     " имя " : "стандартный вывод " ,
     " output_type " : " поток " ,
     " текст " : [
      " [1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 3] \ n " ,
      " [1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 3] \ n " ,
      " Верно \ п "
     ]
    }
   ],
   " источник " : [
    " класс CompressedList (список): \ n " ,
    "     def __iter __ (self): \ n " ,
    "         вернуть ComressedListIterator (self) \ n " ,
    " \ п " ,
    " класс ComressedListIterator: \ n " ,
    "     def __init __ (self, arr): \ n " ,
    "         self.arr = arr \ n " ,
    "         self.counter = 0 \ n " ,
    "         self.index = 0 \ n " ,
    " \ п " ,
    "     def __next __ (self): \ n " ,
    "         если self.index <len (self.arr):                             \ n " ,
    "             if self.counter + 1 <self.arr [self.index] [1]: # if не все повторяющиеся элементы \ n " ,
    "                 self.counter + = 1 # текущий паре self.index выдали - увеличиваем счетчик \ n " ,
    "                 return self.arr [self.index] [0] # выдаем еще один элемент \ n " ,
    "             else: \ n " ,
    "                 self.counter = 0 # если все текущие пары выдали, переходим к \ n " ,
    "                 self.index + = 1 # следующая паре \ n " ,
    "                 return self.arr [self.index-1] [0] \ n " ,
    "         else: \ n " ,
    "             поднять StopIteration () # если все пары перебрали, поднять StopIteration () \ n " ,
    " \ п " ,
    " original = [1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 3] \ n " ,
    " сжатый = CompressedList ([(1, 4), (2, 2), (1, 3), (3, 4)]) \ n " ,
    " \ п " ,
    " decompressed = [x вместо x в сжатом] \ n " ,
    " \ п " ,
    " печать (оригинал) \ n " ,
    " печать (распаковка) \ n " ,
    " печать (оригинал == распакованный) "
   ]
  },
  {
   " cell_type " : " уценка " ,
   " метаданные " : {
    " colab_type " : " текст " ,
    " id " : " JfarXqN7ICwZ "
   },
   " источник " : [
    " По-моему варианту лучше, но \" бесшовного \ " перехода не получается :( \ n " ,
    "   \ п " ,
    " Из-за этого надо потом убирать Ничего "
   ]
  },
  {
   " cell_type " : " уценка " ,
   " метаданные " : {
    " colab_type " : " текст " ,
    " id " : " sz-qf39aLMc3 "
   },
   " источник " : [
    " * Способ №2 * "
   ]
  },
  {
   " cell_type " : " код " ,
   " execution_count " : 2 ,
   " метаданные " : {
    " colab " : {
     " base_uri " : " https: // localhost: 8080 / " ,
     « высота » : 68
    },
    " colab_type " : " код " ,
    " executionInfo " : {
     « истекло » : 2936 ,
     " status " : " ok " ,
     " отметка времени " : 1599592190041 ,
     " user " : {
      " displayName " : " Егор Бронников " ,
      " photoUrl " : " https://lh3.googleusercontent.com/a-/AOh14GhweVQJI7BiE5TaPetwNnKNCwUO1mynGtoA5-pe4Q=s64 " ,
      " userId " : " 14770815761046424264 "
     },
     " user_tz " : -180
    },
    " id " : " Z7Wz3BAGGn1x " ,
    " outputId " : " 0e99b82a-5621-4781-8708-4fa942fb2367 "
   },
   " выходы " : [
    {
     " имя " : "стандартный вывод " ,
     " output_type " : " поток " ,
     " текст " : [
      " [1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 3] \ n " ,
      " [1, 1, 1, 1, Нет, 2, 2, Нет, 1, 1, 1, Нет, 3, 3, 3, 3, Нет] \ n " ,
      " Верно \ п "
     ]
    }
   ],
   " источник " : [
    " класс CompressedList (список): \ n " ,
    "     def __iter __ (self): \ n " ,
    "         вернуть ComressedListIterator (self) \ n " ,
    " \ п " ,
    " класс ComressedListIterator: \ n " ,
    "     def __init __ (self, arr): \ n " ,
    "         self.arr = arr \ n " ,
    "         self.counter = 0 \ n " ,
    "         self.index = 0 \ n " ,
    " \ п " ,
    "     def __next __ (self): \ n " ,
    "         если self.index <len (self.arr):                             \ n " ,
    "             while self.counter <self.arr [self.index] [1]: # если не все повторяющиеся элементы \ n " ,
    "                 self.counter + = 1 # текущий паре self.index выдали - увеличиваем счетчик \ n " ,
    "                 return self.arr [self.index] [0] # выдаем еще один элемент \ n " ,
    "             self.counter = 0 # если все текущие пары выдали, переходим к \ n " ,
    "             self.index + = 1 # следующая пар \ n " ,
    "         else: \ n " ,
    "             поднять StopIteration () # если все пары перебрали, поднять StopIteration () \ n " ,
    " \ п " ,
    " original = [1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 3] \ n " ,
    " сжатый = CompressedList ([(1, 4), (2, 2), (1, 3), (3, 4)]) \ n " ,
    " \ п " ,
    " decompressed = [x вместо x в сжатом] \ n " ,
    " \ п " ,
    " печать (оригинал) \ n " ,
    " печать (распаковка) \ n " ,
    " print (original == list (filter (lambda _: _ is not None, распаковано)) "
   ]
  },
  {
   " cell_type " : " уценка " ,
   " метаданные " : {
    " colab_type " : " текст " ,
    " id " : " 6X7GIqSl3AKu "
   },
   " источник " : [
    " ## Задание №2 "
   ]
  },
  {
   " cell_type " : " уценка " ,
   " метаданные " : {
    " colab_type " : " текст " ,
    " id " : " qycH6OiC3J_A "
   },
   " источник " : [
    " Создать класс для генерации ограниченной арифметичесой прогрессии чисел произвольного типа: \ n " ,
    " \ п " ,
    " ` `Python \ n " ,
    " >>> ap = ArithProgress (0, 1, 3) \ n " ,
    " >>> list (ap) \ n " ,
    " [0, 1, 2] \ n " ,
    " >>> ap = ArithProgress (1, .5, 3) \ n " ,
    " >>> list (ap) \ n " ,
    " [1.0, 1.5, 2.0, 2.5] \ n " ,
    " ` `` "
   ]
  },
  {
   " cell_type " : " код " ,
   " execution_count " : 3 ,
   " метаданные " : {
    " colab " : {},
    " colab_type " : " код " ,
    " executionInfo " : {
     « истекло » : 911 ,
     " status " : " ok " ,
     " отметка времени " : 1599659666430 ,
     " user " : {
      " displayName " : " Егор Бронников " ,
      " photoUrl " : " https://lh3.googleusercontent.com/a-/AOh14GhweVQJI7BiE5TaPetwNnKNCwUO1mynGtoA5-pe4Q=s64 " ,
      " userId " : " 14770815761046424264 "
     },
     " user_tz " : -180
    },
    " id " : " gSvoqXyn2f4j "
   },
   " выходы " : [],
   " источник " : [
    " класс ArithProgress: \ n " ,
    "     def __init __ (self, start, step, stop): \ n " ,
    "         self.start = начало \ п " ,
    "         self.stop = stop \ n " ,
    "         self.step = step \ n " ,
    " \ п " ,
    "     def __iter __ (self): \ n " ,
    "         curr = self.start \ n " ,
    "         while curr <self.stop: \ n " ,
    "             yield curr \ n " ,
    "             curr + = self.step "
   ]
  },
  {
   " cell_type " : " код " ,
   " execution_count " : 4 ,
   " метаданные " : {
    " colab " : {
     " base_uri " : " https: // localhost: 8080 / " ,
     « высота » : 31
    },
    " colab_type " : " код " ,
    " executionInfo " : {
     « истекло » : 663 ,
     " status " : " ok " ,
     " отметка времени " : 1599659382946 ,
     " user " : {
      " displayName " : " Егор Бронников " ,
      " photoUrl " : " https://lh3.googleusercontent.com/a-/AOh14GhweVQJI7BiE5TaPetwNnKNCwUO1mynGtoA5-pe4Q=s64 " ,
      " userId " : " 14770815761046424264 "
     },
     " user_tz " : -180
    },
    " id " : " F0FEbpjB3azi " ,
    " outputId " : " 4b9cd2bd-5a14-4936-f944-ac930a26a9ce "
   },
   " выходы " : [
    {
     " data " : {
      " текст / обычный " : [
       " [0, 1, 2] "
      ]
     },
     " execution_count " : 4 ,
     " метаданные " : {},
     " output_type " : " execute_result "
    }
   ],
   " источник " : [
    " ap = ArithProgress (0, 1, 3) \ n " ,
    " список (ап) "
   ]
  },
  {
   " cell_type " : " код " ,
   " execution_count " : 5 ,
   " метаданные " : {
    " colab " : {
     " base_uri " : " https: // localhost: 8080 / " ,
     « высота » : 31
    },
    " colab_type " : " код " ,
    " executionInfo " : {
     « истекло » : 704 ,
     " status " : " ok " ,
     " отметка времени " : 1599659384087 ,
     " user " : {
      " displayName " : " Егор Бронников " ,
      " photoUrl " : " https://lh3.googleusercontent.com/a-/AOh14GhweVQJI7BiE5TaPetwNnKNCwUO1mynGtoA5-pe4Q=s64 " ,
      " userId " : " 14770815761046424264 "
     },
     " user_tz " : -180
    },
    " id " : " K_sS2QqB3lHF " ,
    " outputId " : " 79975aba-cea8-4d96-bd72-25c90af94bc0 "
   },
   " выходы " : [
    {
     " data " : {
      " текст / обычный " : [
       " [1, 1.5, 2.0, 2.5] "
      ]
     },
     " execution_count " : 5 ,
     " метаданные " : {},
     " output_type " : " execute_result "
    }
   ],
   " источник " : [
    " ap = ArithProgress (1, .5, 3) # только тут '1' не вещественным, как в примере, но для этого были объявлены функции указать вещественное значение \ n " ,
    " список (ап) "
   ]
  },
  {
   " cell_type " : " уценка " ,
   " метаданные " : {
    " colab_type " : " текст " ,
    " id " : " WJSrYk1L3xoc "
   },
   " источник " : [
    " ## Задание №3 "
   ]
  },
  {
   " cell_type " : " уценка " ,
   " метаданные " : {
    " colab_type " : " текст " ,
    " id " : " wX4T3t8DJmte "
   },
   " источник " : [
    " Я прочитал на StackOverflow, что: ' \\ __next \\ __ должен * возвращать * элемент, а не * возвращать * его'. \ n " ,
    " \ п " ,
    " Поэтому есть несколько способов решения задачи "
   ]
  },
  {
   " cell_type " : " уценка " ,
   " метаданные " : {
    " colab_type " : " текст " ,
    " id " : " 817VeZwLKBM2 "
   },
   " источник " : [
    " * Способ №1 * "
   ]
  },
  {
   " cell_type " : " код " ,
   " execution_count " : 6 ,
   " метаданные " : {
    " colab " : {
     " base_uri " : " https: // localhost: 8080 / " ,
     « высота » : 59
    },
    " colab_type " : " код " ,
    " executionInfo " : {
     « истекло » : 902 ,
     " status " : " ok " ,
     " отметка времени " : 1599659850986 ,
     " user " : {
      " displayName " : " Егор Бронников " ,
      " photoUrl " : " https://lh3.googleusercontent.com/a-/AOh14GhweVQJI7BiE5TaPetwNnKNCwUO1mynGtoA5-pe4Q=s64 " ,
      " userId " : " 14770815761046424264 "
     },
     " user_tz " : -180
    },
    " id " : " XjSzEYUy3n2p " ,
    " outputId " : " fd650a6f-20e7-4780-f0bb-69d043a83cec "
   },
   " выходы " : [
    {
     " имя " : "стандартный вывод " ,
     " output_type " : " поток " ,
     " текст " : [
      " [1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 3] \ n " ,
      " [1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 3] \ n " ,
      " Верно \ п "
     ]
    }
   ],
   " источник " : [
    " класс ComressedListIterator: \ n " ,
    "     def __init __ (self, arr): \ n " ,
    "         self.arr = arr \ n " ,
    "         self.counter = 0 \ n " ,
    "         self.index = 0 \ n " ,
    " \ п " ,
    "     def __iter __ (self): \ n " ,
    "         пока self.index <len (self.arr):                             \ n " ,
    "             while self.counter <self.arr [self.index] [1]: \ n " ,
    "                 yield self.arr [self.index] [0] \ n " ,
    "                 self.counter + = 1 \ n " ,
    "             self.index + = 1 \ n " ,
    "             self.counter = 0 \ n " ,
    " \ п " ,
    " original = [1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 3] \ n " ,
    " сжатый = ComressedListIterator ([(1, 4), (2, 2), (1, 3), (3, 4)]) \ n " ,
    " \ п " ,
    " decompressed = список (сжатый) \ n " ,
    " \ п " ,
    " печать (оригинал) \ n " ,
    " печать (распаковка) \ n " ,
    " печать (оригинал == распакованный) "
   ]
  },
  {
   " cell_type " : " уценка " ,
   " метаданные " : {
    " colab_type " : " текст " ,
    " id " : " mepvp3xPKXfM "
   },
   " источник " : [
    " * Способ №2 * (более странный) "
   ]
  },
  {
   " cell_type " : " код " ,
   " execution_count " : 7 ,
   " метаданные " : {
    " colab " : {
     " base_uri " : " https: // localhost: 8080 / " ,
     « высота » : 59
    },
    " colab_type " : " код " ,
    " executionInfo " : {
     « истекло » : 1372 ,
     " status " : " ok " ,
     " отметка времени " : 1599662447962 ,
     " user " : {
      " displayName " : " Егор Бронников " ,
      " photoUrl " : " https://lh3.googleusercontent.com/a-/AOh14GhweVQJI7BiE5TaPetwNnKNCwUO1mynGtoA5-pe4Q=s64 " ,
      " userId " : " 14770815761046424264 "
     },
     " user_tz " : -180
    },
    " id " : " h0MGkqQmKafz " ,
    " outputId " : " 79ee86ce-7436-46f4-9d18-e7ff056cbf85 "
   },
   " выходы " : [
    {
     " имя " : "стандартный вывод " ,
     " output_type " : " поток " ,
     " текст " : [
      " [1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 3] \ n " ,
      " [1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 3] \ n " ,
      " Верно \ п "
     ]
    }
   ],
   " источник " : [
    " класс CompressedList (список): \ n " ,
    "     def __iter __ (self): \ n " ,
    "         вернуть ComressedListIterator (self) \ n " ,
    " \ п " ,
    " def генератор (arr, index, counter): \ n " ,
    "     пока индекс <len (arr): \ n " ,
    "         пока счетчик <arr [index] [1]: \ n " ,
    "             yield arr [index] [0] \ n " ,
    "             counter + = 1 \ n " ,
    "         index + = 1 \ n " ,
    "         counter = 0 \ n " ,
    " \ п " ,
    " класс ComressedListIterator: \ n " ,
    "     def __init __ (self, arr): \ n " ,
    "         self.arr = arr \ n " ,
    "         self.counter = 0 \ n " ,
    "         self.index = 0 \ n " ,
    "         self.generator = generator (self.arr, self.index, self.counter) \ n " ,
    " \ п " ,
    "     def __next __ (self): \ n " ,
    "         вернуться далее (self.generator) \ n " ,
    " \ п " ,
    " original = [1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 3] \ n " ,
    " сжатый = CompressedList ([(1, 4), (2, 2), (1, 3), (3, 4)]) \ n " ,
    " \ п " ,
    " decompressed = [x вместо x в сжатом] \ n " ,
    " \ п " ,
    " печать (оригинал) \ n " ,
    " печать (распаковка) \ n " ,
    " печать (оригинал == распакованный) "
   ]
  }
 ],
 " метаданные " : {
  " colab " : {
   " Authorship_tag " : " ABX9TyPUDMcd + b5tZazMhG21tYAq " ,
   " collapsed_sections " : [],
   " name " : " Домашнее задание №1.ipynb " ,
   " происхождение " : []
  },
  " kernelspec " : {
   " display_name " : " Python 3 " ,
   " язык " : " питон " ,
   " имя " : " питон3 "
  },
  " language_info " : {
   " codemirror_mode " : {
    " имя " : " ipython " ,
    « версия » : 3
   },
   " расширение_файла " : " .py " ,
   " mimetype " : " текст / x-python " ,
   " имя " : " питон " ,
   " nbconvert_exporter " : " питон " ,
   " pygments_lexer " : " ipython3 " ,
   " версия " : " 3.8.2 "
  }
 },
 « nbformat » : 4 ,
 " nbformat_minor " : 1
}
